// Code generated by MockGen. DO NOT EDIT.
// Source: ./services/userService.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	models "echo-sample/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCreateUserRepository is a mock of CreateUserRepository interface
type MockCreateUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCreateUserRepositoryMockRecorder
}

// MockCreateUserRepositoryMockRecorder is the mock recorder for MockCreateUserRepository
type MockCreateUserRepositoryMockRecorder struct {
	mock *MockCreateUserRepository
}

// NewMockCreateUserRepository creates a new mock instance
func NewMockCreateUserRepository(ctrl *gomock.Controller) *MockCreateUserRepository {
	mock := &MockCreateUserRepository{ctrl: ctrl}
	mock.recorder = &MockCreateUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCreateUserRepository) EXPECT() *MockCreateUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method
func (m *MockCreateUserRepository) CreateUser(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockCreateUserRepositoryMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockCreateUserRepository)(nil).CreateUser), user)
}

// CheckSpring mocks base method
func (m *MockCreateUserRepository) CheckSpring() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSpring")
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckSpring indicates an expected call of CheckSpring
func (mr *MockCreateUserRepositoryMockRecorder) CheckSpring() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSpring", reflect.TypeOf((*MockCreateUserRepository)(nil).CheckSpring))
}
